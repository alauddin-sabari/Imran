// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract VulnerableBank {
    mapping(address => uint256) public balances;

    // Function to deposit Ether into the contract
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    // Vulnerable withdraw function
    function withdraw(uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");

        // Unchecked low-level call (vulnerability: reentrancy)
        (bool success, ) = msg.sender.call{value: _amount}("");
        require(success, "Transfer failed");

        // Update balance after sending Ether (this opens reentrancy vulnerability)
        balances[msg.sender] -= _amount;
    }

    // Function to check contract's balance
    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }
}
